// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: data.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Frametracking_Matrix4x4: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var m00: Float = 0

  var m01: Float = 0

  var m02: Float = 0

  var m03: Float = 0

  var m10: Float = 0

  var m11: Float = 0

  var m12: Float = 0

  var m13: Float = 0

  var m20: Float = 0

  var m21: Float = 0

  var m22: Float = 0

  var m23: Float = 0

  var m30: Float = 0

  var m31: Float = 0

  var m32: Float = 0

  var m33: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Frametracking_Matrix3x3: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var m00: Float = 0

  var m01: Float = 0

  var m02: Float = 0

  var m10: Float = 0

  var m11: Float = 0

  var m12: Float = 0

  var m20: Float = 0

  var m21: Float = 0

  var m22: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Frametracking_FrameUpdate: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var head: Frametracking_Matrix4x4 {
    get {return _storage._head ?? Frametracking_Matrix4x4()}
    set {_uniqueStorage()._head = newValue}
  }
  /// Returns true if `head` has been explicitly set.
  var hasHead: Bool {return _storage._head != nil}
  /// Clears the value of `head`. Subsequent reads from it will return its default value.
  mutating func clearHead() {_uniqueStorage()._head = nil}

  var extrinsic: Frametracking_Matrix4x4 {
    get {return _storage._extrinsic ?? Frametracking_Matrix4x4()}
    set {_uniqueStorage()._extrinsic = newValue}
  }
  /// Returns true if `extrinsic` has been explicitly set.
  var hasExtrinsic: Bool {return _storage._extrinsic != nil}
  /// Clears the value of `extrinsic`. Subsequent reads from it will return its default value.
  mutating func clearExtrinsic() {_uniqueStorage()._extrinsic = nil}

  var intrinsic: Frametracking_Matrix3x3 {
    get {return _storage._intrinsic ?? Frametracking_Matrix3x3()}
    set {_uniqueStorage()._intrinsic = newValue}
  }
  /// Returns true if `intrinsic` has been explicitly set.
  var hasIntrinsic: Bool {return _storage._intrinsic != nil}
  /// Clears the value of `intrinsic`. Subsequent reads from it will return its default value.
  mutating func clearIntrinsic() {_uniqueStorage()._intrinsic = nil}

  var captureTime: Double {
    get {return _storage._captureTime}
    set {_uniqueStorage()._captureTime = newValue}
  }

  var midExposureTimestamp: Int32 {
    get {return _storage._midExposureTimestamp}
    set {_uniqueStorage()._midExposureTimestamp = newValue}
  }

  var colorTemperature: Int32 {
    get {return _storage._colorTemperature}
    set {_uniqueStorage()._colorTemperature = newValue}
  }

  var exposureDuration: Double {
    get {return _storage._exposureDuration}
    set {_uniqueStorage()._exposureDuration = newValue}
  }

  var cameraType: String {
    get {return _storage._cameraType}
    set {_uniqueStorage()._cameraType = newValue}
  }

  var cameraPosition: String {
    get {return _storage._cameraPosition}
    set {_uniqueStorage()._cameraPosition = newValue}
  }

  var image: Data {
    get {return _storage._image}
    set {_uniqueStorage()._image = newValue}
  }

  var seconds: Int64 {
    get {return _storage._seconds}
    set {_uniqueStorage()._seconds = newValue}
  }

  var nanos: Int32 {
    get {return _storage._nanos}
    set {_uniqueStorage()._nanos = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Frametracking_FrameUpdateAck: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "frametracking"

extension Frametracking_Matrix4x4: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Matrix4x4"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "m00"),
    2: .same(proto: "m01"),
    3: .same(proto: "m02"),
    4: .same(proto: "m03"),
    5: .same(proto: "m10"),
    6: .same(proto: "m11"),
    7: .same(proto: "m12"),
    8: .same(proto: "m13"),
    9: .same(proto: "m20"),
    10: .same(proto: "m21"),
    11: .same(proto: "m22"),
    12: .same(proto: "m23"),
    13: .same(proto: "m30"),
    14: .same(proto: "m31"),
    15: .same(proto: "m32"),
    16: .same(proto: "m33"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.m00) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.m01) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.m02) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.m03) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.m10) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.m11) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.m12) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.m13) }()
      case 9: try { try decoder.decodeSingularFloatField(value: &self.m20) }()
      case 10: try { try decoder.decodeSingularFloatField(value: &self.m21) }()
      case 11: try { try decoder.decodeSingularFloatField(value: &self.m22) }()
      case 12: try { try decoder.decodeSingularFloatField(value: &self.m23) }()
      case 13: try { try decoder.decodeSingularFloatField(value: &self.m30) }()
      case 14: try { try decoder.decodeSingularFloatField(value: &self.m31) }()
      case 15: try { try decoder.decodeSingularFloatField(value: &self.m32) }()
      case 16: try { try decoder.decodeSingularFloatField(value: &self.m33) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.m00.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m00, fieldNumber: 1)
    }
    if self.m01.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m01, fieldNumber: 2)
    }
    if self.m02.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m02, fieldNumber: 3)
    }
    if self.m03.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m03, fieldNumber: 4)
    }
    if self.m10.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m10, fieldNumber: 5)
    }
    if self.m11.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m11, fieldNumber: 6)
    }
    if self.m12.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m12, fieldNumber: 7)
    }
    if self.m13.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m13, fieldNumber: 8)
    }
    if self.m20.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m20, fieldNumber: 9)
    }
    if self.m21.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m21, fieldNumber: 10)
    }
    if self.m22.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m22, fieldNumber: 11)
    }
    if self.m23.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m23, fieldNumber: 12)
    }
    if self.m30.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m30, fieldNumber: 13)
    }
    if self.m31.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m31, fieldNumber: 14)
    }
    if self.m32.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m32, fieldNumber: 15)
    }
    if self.m33.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m33, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Frametracking_Matrix4x4, rhs: Frametracking_Matrix4x4) -> Bool {
    if lhs.m00 != rhs.m00 {return false}
    if lhs.m01 != rhs.m01 {return false}
    if lhs.m02 != rhs.m02 {return false}
    if lhs.m03 != rhs.m03 {return false}
    if lhs.m10 != rhs.m10 {return false}
    if lhs.m11 != rhs.m11 {return false}
    if lhs.m12 != rhs.m12 {return false}
    if lhs.m13 != rhs.m13 {return false}
    if lhs.m20 != rhs.m20 {return false}
    if lhs.m21 != rhs.m21 {return false}
    if lhs.m22 != rhs.m22 {return false}
    if lhs.m23 != rhs.m23 {return false}
    if lhs.m30 != rhs.m30 {return false}
    if lhs.m31 != rhs.m31 {return false}
    if lhs.m32 != rhs.m32 {return false}
    if lhs.m33 != rhs.m33 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Frametracking_Matrix3x3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Matrix3x3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "m00"),
    2: .same(proto: "m01"),
    3: .same(proto: "m02"),
    4: .same(proto: "m10"),
    5: .same(proto: "m11"),
    6: .same(proto: "m12"),
    7: .same(proto: "m20"),
    8: .same(proto: "m21"),
    9: .same(proto: "m22"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.m00) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.m01) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.m02) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self.m10) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self.m11) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self.m12) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.m20) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self.m21) }()
      case 9: try { try decoder.decodeSingularFloatField(value: &self.m22) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.m00.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m00, fieldNumber: 1)
    }
    if self.m01.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m01, fieldNumber: 2)
    }
    if self.m02.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m02, fieldNumber: 3)
    }
    if self.m10.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m10, fieldNumber: 4)
    }
    if self.m11.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m11, fieldNumber: 5)
    }
    if self.m12.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m12, fieldNumber: 6)
    }
    if self.m20.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m20, fieldNumber: 7)
    }
    if self.m21.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m21, fieldNumber: 8)
    }
    if self.m22.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.m22, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Frametracking_Matrix3x3, rhs: Frametracking_Matrix3x3) -> Bool {
    if lhs.m00 != rhs.m00 {return false}
    if lhs.m01 != rhs.m01 {return false}
    if lhs.m02 != rhs.m02 {return false}
    if lhs.m10 != rhs.m10 {return false}
    if lhs.m11 != rhs.m11 {return false}
    if lhs.m12 != rhs.m12 {return false}
    if lhs.m20 != rhs.m20 {return false}
    if lhs.m21 != rhs.m21 {return false}
    if lhs.m22 != rhs.m22 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Frametracking_FrameUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FrameUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Head"),
    2: .same(proto: "Extrinsic"),
    3: .same(proto: "Intrinsic"),
    4: .same(proto: "captureTime"),
    5: .same(proto: "midExposureTimestamp"),
    6: .same(proto: "colorTemperature"),
    7: .same(proto: "exposureDuration"),
    8: .same(proto: "cameraType"),
    9: .same(proto: "cameraPosition"),
    10: .same(proto: "image"),
    11: .same(proto: "seconds"),
    12: .same(proto: "nanos"),
  ]

  fileprivate class _StorageClass {
    var _head: Frametracking_Matrix4x4? = nil
    var _extrinsic: Frametracking_Matrix4x4? = nil
    var _intrinsic: Frametracking_Matrix3x3? = nil
    var _captureTime: Double = 0
    var _midExposureTimestamp: Int32 = 0
    var _colorTemperature: Int32 = 0
    var _exposureDuration: Double = 0
    var _cameraType: String = String()
    var _cameraPosition: String = String()
    var _image: Data = Data()
    var _seconds: Int64 = 0
    var _nanos: Int32 = 0

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _head = source._head
      _extrinsic = source._extrinsic
      _intrinsic = source._intrinsic
      _captureTime = source._captureTime
      _midExposureTimestamp = source._midExposureTimestamp
      _colorTemperature = source._colorTemperature
      _exposureDuration = source._exposureDuration
      _cameraType = source._cameraType
      _cameraPosition = source._cameraPosition
      _image = source._image
      _seconds = source._seconds
      _nanos = source._nanos
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._head) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._extrinsic) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._intrinsic) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._captureTime) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._midExposureTimestamp) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._colorTemperature) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._exposureDuration) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._cameraType) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._cameraPosition) }()
        case 10: try { try decoder.decodeSingularBytesField(value: &_storage._image) }()
        case 11: try { try decoder.decodeSingularInt64Field(value: &_storage._seconds) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._nanos) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._head {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._extrinsic {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._intrinsic {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if _storage._captureTime.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._captureTime, fieldNumber: 4)
      }
      if _storage._midExposureTimestamp != 0 {
        try visitor.visitSingularInt32Field(value: _storage._midExposureTimestamp, fieldNumber: 5)
      }
      if _storage._colorTemperature != 0 {
        try visitor.visitSingularInt32Field(value: _storage._colorTemperature, fieldNumber: 6)
      }
      if _storage._exposureDuration.bitPattern != 0 {
        try visitor.visitSingularDoubleField(value: _storage._exposureDuration, fieldNumber: 7)
      }
      if !_storage._cameraType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cameraType, fieldNumber: 8)
      }
      if !_storage._cameraPosition.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cameraPosition, fieldNumber: 9)
      }
      if !_storage._image.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._image, fieldNumber: 10)
      }
      if _storage._seconds != 0 {
        try visitor.visitSingularInt64Field(value: _storage._seconds, fieldNumber: 11)
      }
      if _storage._nanos != 0 {
        try visitor.visitSingularInt32Field(value: _storage._nanos, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Frametracking_FrameUpdate, rhs: Frametracking_FrameUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._head != rhs_storage._head {return false}
        if _storage._extrinsic != rhs_storage._extrinsic {return false}
        if _storage._intrinsic != rhs_storage._intrinsic {return false}
        if _storage._captureTime != rhs_storage._captureTime {return false}
        if _storage._midExposureTimestamp != rhs_storage._midExposureTimestamp {return false}
        if _storage._colorTemperature != rhs_storage._colorTemperature {return false}
        if _storage._exposureDuration != rhs_storage._exposureDuration {return false}
        if _storage._cameraType != rhs_storage._cameraType {return false}
        if _storage._cameraPosition != rhs_storage._cameraPosition {return false}
        if _storage._image != rhs_storage._image {return false}
        if _storage._seconds != rhs_storage._seconds {return false}
        if _storage._nanos != rhs_storage._nanos {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Frametracking_FrameUpdateAck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FrameUpdateAck"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Frametracking_FrameUpdateAck, rhs: Frametracking_FrameUpdateAck) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
